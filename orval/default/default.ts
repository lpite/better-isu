/**
 * Generated by orval v6.30.2 🍺
 * Do not edit manually.
 * Capybara
 * OpenAPI spec version: 1.0.0
 */
import useSwr from "swr";
import type { Arguments, Key, SWRConfiguration } from "swr";
import useSWRMutation from "swr/mutation";
import type { SWRMutationConfiguration } from "swr/mutation";
import type {
  GetAuthSession200,
  GetAuthSession401,
  GetGeneralGetTypeOfWeek200,
  GetJournalGet200,
  GetJournalGetParams,
  GetUserProfile200,
  GetUserRating200Item,
  GetUserSchedule200Item,
  GetUserSubjects200Item,
  PostAuthLogin200,
  PostAuthLoginBody,
} from ".././model";
import getUserProfileMutator from ".././custom-client";
import getUserSubjectsMutator from ".././custom-client";
import getUserScheduleMutator from ".././custom-client";
import getUserRatingMutator from ".././custom-client";
import getJournalGetMutator from ".././custom-client";
import getGeneralGetTypeOfWeekMutator from ".././custom-client";
import getAuthSessionMutator from ".././custom-client";
import postAuthLogoutMutator from ".././custom-client";
import postAuthLoginMutator from ".././custom-client";

export const getUserProfile = () => {
  return getUserProfileMutator<GetUserProfile200>({
    url: `/api/hono/openapi/user/profile`,
    method: "GET",
  });
};

export const getGetUserProfileKey = () =>
  [`/api/hono/openapi/user/profile`] as const;

export type GetUserProfileQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserProfile>>
>;
export type GetUserProfileQueryError = unknown;

export const useGetUserProfile = <TError = unknown>(options?: {
  swr?: SWRConfiguration<Awaited<ReturnType<typeof getUserProfile>>, TError> & {
    swrKey?: Key;
    enabled?: boolean;
  };
}) => {
  const { swr: swrOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getGetUserProfileKey() : null));
  const swrFn = () => getUserProfile();

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};
export const getUserSubjects = () => {
  return getUserSubjectsMutator<GetUserSubjects200Item[]>({
    url: `/api/hono/openapi/user/subjects`,
    method: "GET",
  });
};

export const getGetUserSubjectsKey = () =>
  [`/api/hono/openapi/user/subjects`] as const;

export type GetUserSubjectsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserSubjects>>
>;
export type GetUserSubjectsQueryError = unknown;

export const useGetUserSubjects = <TError = unknown>(options?: {
  swr?: SWRConfiguration<
    Awaited<ReturnType<typeof getUserSubjects>>,
    TError
  > & { swrKey?: Key; enabled?: boolean };
}) => {
  const { swr: swrOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getGetUserSubjectsKey() : null));
  const swrFn = () => getUserSubjects();

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};
export const getUserSchedule = () => {
  return getUserScheduleMutator<GetUserSchedule200Item[]>({
    url: `/api/hono/openapi/user/schedule`,
    method: "GET",
  });
};

export const getGetUserScheduleKey = () =>
  [`/api/hono/openapi/user/schedule`] as const;

export type GetUserScheduleQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserSchedule>>
>;
export type GetUserScheduleQueryError = unknown;

export const useGetUserSchedule = <TError = unknown>(options?: {
  swr?: SWRConfiguration<
    Awaited<ReturnType<typeof getUserSchedule>>,
    TError
  > & { swrKey?: Key; enabled?: boolean };
}) => {
  const { swr: swrOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getGetUserScheduleKey() : null));
  const swrFn = () => getUserSchedule();

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};
export const getUserRating = () => {
  return getUserRatingMutator<GetUserRating200Item[]>({
    url: `/api/hono/openapi/user/rating`,
    method: "GET",
  });
};

export const getGetUserRatingKey = () =>
  [`/api/hono/openapi/user/rating`] as const;

export type GetUserRatingQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserRating>>
>;
export type GetUserRatingQueryError = unknown;

export const useGetUserRating = <TError = unknown>(options?: {
  swr?: SWRConfiguration<Awaited<ReturnType<typeof getUserRating>>, TError> & {
    swrKey?: Key;
    enabled?: boolean;
  };
}) => {
  const { swr: swrOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getGetUserRatingKey() : null));
  const swrFn = () => getUserRating();

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};
export const getJournalGet = (params: GetJournalGetParams) => {
  return getJournalGetMutator<GetJournalGet200>({
    url: `/api/hono/openapi/journal/get`,
    method: "GET",
    params,
  });
};

export const getGetJournalGetKey = (params: GetJournalGetParams) =>
  [`/api/hono/openapi/journal/get`, ...(params ? [params] : [])] as const;

export type GetJournalGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getJournalGet>>
>;
export type GetJournalGetQueryError = unknown;

export const useGetJournalGet = <TError = unknown>(
  params: GetJournalGetParams,
  options?: {
    swr?: SWRConfiguration<
      Awaited<ReturnType<typeof getJournalGet>>,
      TError
    > & { swrKey?: Key; enabled?: boolean };
  },
) => {
  const { swr: swrOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getGetJournalGetKey(params) : null));
  const swrFn = () => getJournalGet(params);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};
export const getGeneralGetTypeOfWeek = () => {
  return getGeneralGetTypeOfWeekMutator<GetGeneralGetTypeOfWeek200>({
    url: `/api/hono/openapi/general/getTypeOfWeek`,
    method: "GET",
  });
};

export const getGetGeneralGetTypeOfWeekKey = () =>
  [`/api/hono/openapi/general/getTypeOfWeek`] as const;

export type GetGeneralGetTypeOfWeekQueryResult = NonNullable<
  Awaited<ReturnType<typeof getGeneralGetTypeOfWeek>>
>;
export type GetGeneralGetTypeOfWeekQueryError = unknown;

export const useGetGeneralGetTypeOfWeek = <TError = unknown>(options?: {
  swr?: SWRConfiguration<
    Awaited<ReturnType<typeof getGeneralGetTypeOfWeek>>,
    TError
  > & { swrKey?: Key; enabled?: boolean };
}) => {
  const { swr: swrOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ??
    (() => (isEnabled ? getGetGeneralGetTypeOfWeekKey() : null));
  const swrFn = () => getGeneralGetTypeOfWeek();

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};
export const getAuthSession = () => {
  return getAuthSessionMutator<GetAuthSession200>({
    url: `/api/hono/openapi/auth/session`,
    method: "GET",
  });
};

export const getGetAuthSessionKey = () =>
  [`/api/hono/openapi/auth/session`] as const;

export type GetAuthSessionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAuthSession>>
>;
export type GetAuthSessionQueryError = GetAuthSession401;

export const useGetAuthSession = <TError = GetAuthSession401>(options?: {
  swr?: SWRConfiguration<Awaited<ReturnType<typeof getAuthSession>>, TError> & {
    swrKey?: Key;
    enabled?: boolean;
  };
}) => {
  const { swr: swrOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getGetAuthSessionKey() : null));
  const swrFn = () => getAuthSession();

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};
export const postAuthLogout = () => {
  return postAuthLogoutMutator<void>({
    url: `/api/hono/openapi/auth/logout`,
    method: "POST",
  });
};

export const getPostAuthLogoutMutationFetcher = () => {
  return (_: string, __: { arg: Arguments }): Promise<void> => {
    return postAuthLogout();
  };
};
export const getPostAuthLogoutMutationKey = () =>
  `/api/hono/openapi/auth/logout` as const;

export type PostAuthLogoutMutationResult = NonNullable<
  Awaited<ReturnType<typeof postAuthLogout>>
>;
export type PostAuthLogoutMutationError = unknown;

export const usePostAuthLogout = <TError = unknown>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof postAuthLogout>>,
    TError,
    string,
    Arguments,
    Awaited<ReturnType<typeof postAuthLogout>>
  > & { swrKey?: string };
}) => {
  const { swr: swrOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getPostAuthLogoutMutationKey();
  const swrFn = getPostAuthLogoutMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
export const postAuthLogin = (postAuthLoginBody: PostAuthLoginBody) => {
  return postAuthLoginMutator<PostAuthLogin200>({
    url: `/api/hono/openapi/auth/login`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: postAuthLoginBody,
  });
};

export const getPostAuthLoginMutationFetcher = () => {
  return (
    _: string,
    { arg }: { arg: PostAuthLoginBody },
  ): Promise<PostAuthLogin200> => {
    return postAuthLogin(arg);
  };
};
export const getPostAuthLoginMutationKey = () =>
  `/api/hono/openapi/auth/login` as const;

export type PostAuthLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof postAuthLogin>>
>;
export type PostAuthLoginMutationError = unknown;

export const usePostAuthLogin = <TError = unknown>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof postAuthLogin>>,
    TError,
    string,
    PostAuthLoginBody,
    Awaited<ReturnType<typeof postAuthLogin>>
  > & { swrKey?: string };
}) => {
  const { swr: swrOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getPostAuthLoginMutationKey();
  const swrFn = getPostAuthLoginMutationFetcher();

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};
