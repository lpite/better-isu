/**
 * Generated by orval v6.30.2 🍺
 * Do not edit manually.
 * Capybara
 * OpenAPI spec version: 1.0.0
 */
import useSwr from 'swr'
import type {
  Key,
  SWRConfiguration
} from 'swr'
import type {
  GetAuthSession200,
  GetAuthSession401,
  GetGeneralGetTypeOfWeek200,
  GetJournalGet200,
  GetJournalGetParams,
  GetUserProfile200,
  GetUserSchedule200Item,
  GetUserSubjects200Item
} from '.././model'
import getUserProfileMutator from '.././custom-client';
import getUserSubjectsMutator from '.././custom-client';
import getUserScheduleMutator from '.././custom-client';
import getJournalGetMutator from '.././custom-client';
import getGeneralGetTypeOfWeekMutator from '.././custom-client';
import getAuthSessionMutator from '.././custom-client';


  
  export const getUserProfile = (
    
 ) => {
      return getUserProfileMutator<GetUserProfile200>(
      {url: `/api/hono/user/profile`, method: 'GET'
    },
      );
    }
  


export const getGetUserProfileKey = () => [`/api/hono/user/profile`] as const;


export type GetUserProfileQueryResult = NonNullable<Awaited<ReturnType<typeof getUserProfile>>>
export type GetUserProfileQueryError = unknown

export const useGetUserProfile = <TError = unknown>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUserProfile>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUserProfileKey() : null);
  const swrFn = () => getUserProfile();

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
export const getUserSubjects = (
    
 ) => {
      return getUserSubjectsMutator<GetUserSubjects200Item[]>(
      {url: `/api/hono/user/subjects`, method: 'GET'
    },
      );
    }
  


export const getGetUserSubjectsKey = () => [`/api/hono/user/subjects`] as const;


export type GetUserSubjectsQueryResult = NonNullable<Awaited<ReturnType<typeof getUserSubjects>>>
export type GetUserSubjectsQueryError = unknown

export const useGetUserSubjects = <TError = unknown>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUserSubjects>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUserSubjectsKey() : null);
  const swrFn = () => getUserSubjects();

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
export const getUserSchedule = (
    
 ) => {
      return getUserScheduleMutator<GetUserSchedule200Item[]>(
      {url: `/api/hono/user/schedule`, method: 'GET'
    },
      );
    }
  


export const getGetUserScheduleKey = () => [`/api/hono/user/schedule`] as const;


export type GetUserScheduleQueryResult = NonNullable<Awaited<ReturnType<typeof getUserSchedule>>>
export type GetUserScheduleQueryError = unknown

export const useGetUserSchedule = <TError = unknown>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUserSchedule>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUserScheduleKey() : null);
  const swrFn = () => getUserSchedule();

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
export const getJournalGet = (
    params: GetJournalGetParams,
 ) => {
      return getJournalGetMutator<GetJournalGet200>(
      {url: `/api/hono/journal/get`, method: 'GET',
        params
    },
      );
    }
  


export const getGetJournalGetKey = (params: GetJournalGetParams,) => [`/api/hono/journal/get`, ...(params ? [params]: [])] as const;


export type GetJournalGetQueryResult = NonNullable<Awaited<ReturnType<typeof getJournalGet>>>
export type GetJournalGetQueryError = unknown

export const useGetJournalGet = <TError = unknown>(
  params: GetJournalGetParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getJournalGet>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetJournalGetKey(params) : null);
  const swrFn = () => getJournalGet(params, );

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
export const getGeneralGetTypeOfWeek = (
    
 ) => {
      return getGeneralGetTypeOfWeekMutator<GetGeneralGetTypeOfWeek200>(
      {url: `/api/hono/general/getTypeOfWeek`, method: 'GET'
    },
      );
    }
  


export const getGetGeneralGetTypeOfWeekKey = () => [`/api/hono/general/getTypeOfWeek`] as const;


export type GetGeneralGetTypeOfWeekQueryResult = NonNullable<Awaited<ReturnType<typeof getGeneralGetTypeOfWeek>>>
export type GetGeneralGetTypeOfWeekQueryError = unknown

export const useGetGeneralGetTypeOfWeek = <TError = unknown>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getGeneralGetTypeOfWeek>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetGeneralGetTypeOfWeekKey() : null);
  const swrFn = () => getGeneralGetTypeOfWeek();

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
export const getAuthSession = (
    
 ) => {
      return getAuthSessionMutator<GetAuthSession200>(
      {url: `/api/hono/auth/session`, method: 'GET'
    },
      );
    }
  


export const getGetAuthSessionKey = () => [`/api/hono/auth/session`] as const;


export type GetAuthSessionQueryResult = NonNullable<Awaited<ReturnType<typeof getAuthSession>>>
export type GetAuthSessionQueryError = GetAuthSession401

export const useGetAuthSession = <TError = GetAuthSession401>(
   options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getAuthSession>>, TError> & { swrKey?: Key, enabled?: boolean },  }
) => {
  const {swr: swrOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetAuthSessionKey() : null);
  const swrFn = () => getAuthSession();

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
